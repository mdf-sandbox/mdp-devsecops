name: reusable-workflow-deploy

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: Target environment
        default: sit
      repository:
        type: string
        description: Repository name
        required: true
      ref:
        type: string
        description: Branch name
        required: true
      run_id:
        type: string
        description: Databricks Run ID
        default: ''

  # Allows you to run this workflow manually from the Action tab
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Target environment
        options:
         - uat
         - prod
      repository:
        type: string
        description: Repository name
        required: true
      ref:
        type: string
        description: Release tag
        required: true
      run_id:
        type: string
        description: Databricks Run ID
        required: true

# Use the Bash shell as default settings for all jobs in the workflow
defaults:
  run:
    shell: bash

jobs:
  check-approval-gate:
    name: Check Approval Gate
    runs-on: ubuntu-20.04
    outputs:
      pre_approve_status: ${{ steps.op1.outputs.pre_approve_status }}
      post_approve_status: ${{ steps.op2.outputs.post_approve_status }}

    steps:
      - name: Set default approval status
        if: always()
        id: op1
        run: |
          echo "pre_approve_status=approved" >> $GITHUB_OUTPUT

      - name: Checkout main branch of DevOps repository
        if: ${{ inputs.run_id != '' }}
        uses: actions/checkout@v4
        with:
          repository: mdf-sandbox/sample-devops
          ref: main
          fetch-depth: 0

      - name: Set environment variables
        if: ${{ inputs.run_id != '' }}
        env:
          REPOSITORY_VAR: ${{ inputs.repository }}
        run: |
          echo "APPROVAL_GATE_ENVIRONMENT=${{ inputs.environment == 'uat' && 'sit' || 'uat' }}" >> $GITHUB_ENV
          echo "APPROVAL_GATE_PATH=${{ inputs.environment == 'uat' && '/Shared/MDF/$REPOSITORY_VAR/sit' || '/Shared/MDF/$REPOSITORY_VAR/uat' }}" >> $GITHUB_ENV

      - name: Load environment variables from ${{ env.APPROVAL_GATE_ENVIRONMENT }} dotenv file
        if: ${{ inputs.run_id != '' }}
        run: |
          cat ./dotenv/${{ env.APPROVAL_GATE_ENVIRONMENT }}.env >> $GITHUB_ENV

      - name: Set up Python
        if: ${{ inputs.run_id != '' }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ vars.PYTHON_VERSION_VAR }}

      - name: Install Poetry
        if: ${{ inputs.run_id != '' }}
        uses: snok/install-poetry@v1
        with:
          version: ${{ vars.POETRY_VERSION_VAR }}

      - name: Install pip and etc
        if: ${{ inputs.run_id != '' }}
        run: |
          pip install --upgrade pip
          pip install databricks-cli
          pip install dbx

      - name: Connect to Databricks with Frmwk profiles
        if: ${{ inputs.run_id != '' }}
        run: |
          echo ${{ secrets.AZURE_DATABRICKS_PAT }} | \
            databricks configure --profile ar-frmwk --host ${{ env.DATABRICKS_HOST }} --jobs-api-version ${{ env.DATABRICKS_JOBS_API_VERSION }} --token

      - name: Get metadata from Databricks workflow Run ID
        if: ${{ inputs.run_id != '' }}
        run: |
          databricks --profile ar-frmwk runs get --run-id ${{ inputs.run_id }} | jq '{result_state: .state.result_state, notebook_path: .overriding_parameters.notebook_params.notebook_path, run_page_url: .run_page_url}' > run_metadata.json
          cat run_metadata.json

      - name: Set environment variables from metadata
        if: ${{ inputs.run_id != '' }}
        run: |
          echo "RUN_RESULT_STATE=$(jq -r '.result_state' run_metadata.json)" >> $GITHUB_ENV
          echo "RUN_NOTEBOOK_PATH=$(jq -r '.notebook_path' run_metadata.json)" >> $GITHUB_ENV
          echo "RUN_PAGE_URL=$(jq -r '.run_page_url' run_metadata.json)" >> $GITHUB_ENV

      - name: Pending Approval
        id: op2
        if: ${{ (inputs.run_id != '') && ((!startsWith(env.RUN_NOTEBOOK_PATH, env.APPROVAL_GATE_PATH)) || (env.RUN_RESULT_STATE != 'SUCCESS')) }}
        run: |
          echo "::error::Please check the result of workflow run id '${{ inputs.run_id }}' from this url '${{ env.RUN_PAGE_URL }}'"
          echo "post_approve_status=pending" >> $GITHUB_OUTPUT
          exit 1

  build:
    name: Promote package to ${{ inputs.environment }} feed view
    runs-on: ubuntu-20.04
    needs: [check-approval-gate]
    if: ${{ (needs.check-approval-gate.outputs.pre_approve_status == 'approved') && (needs.check-approval-gate.outputs.post_approve_status != 'pending') }}

    steps:
      - name: Checkout ${{ inputs.ref }} of ${{ inputs.repository }} repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          token: ${{ secrets.GHE_DEVOPS_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ vars.PYTHON_VERSION_VAR }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ vars.POETRY_VERSION_VAR }}

      - name: Set environment variables
        run: |
          echo "PACKAGE_NAME=$(echo ${{ inputs.repository }} | awk -F'/' '{print $2}')" >> $GITHUB_ENV
          echo "CURRENT_VERSION=$(poetry version --dry-run -s)" >> $GITHUB_ENV

      - name: Checkout main branch of DevOps repository
        uses: actions/checkout@v4
        with:
          repository: mdf-sandbox/sample-devops
          ref: main
          fetch-depth: 0

      - name: Promote ${{ env.PACKAGE_NAME }} package version ${{ env.CURRENT_VERSION }} to ${{ inputs.environment }} feed view
        uses: ./custom-actions/azure-devops-artifacts/promote-package
        with:
          package_name: ${{ env.PACKAGE_NAME }}
          package_version: ${{ env.CURRENT_VERSION }}
          feed_view: ${{ inputs.environment }}
          token: ${{ secrets.AZURE_DEVOPS_PAT }}

  deploy:
    name: Deploy to ${{ inputs.environment }} environment
    runs-on: ubuntu-20.04
    needs: [build]
    outputs:
      work_item_id: ${{ steps.op1.outputs.work_item_id }}

    steps:
      - name: Checkout main branch of DevOps repository
        uses: actions/checkout@v4
        with:
          repository: mdf-sandbox/sample-devops
          ref: main
          fetch-depth: 0

      - name: Load environment variables from ${{ inputs.environment }} dotenv file
        run: |
          cat ./dotenv/${{ inputs.environment }}.env >> $GITHUB_ENV

      - name: Checkout ${{ inputs.ref }} of ${{ inputs.repository }} repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          fetch-depth: 0
          token: ${{ secrets.GHE_DEVOPS_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ vars.PYTHON_VERSION_VAR }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ vars.POETRY_VERSION_VAR }}

      - name: Install pip and etc
        run: |
          pip install --upgrade pip
          pip install databricks-cli
          pip install dbx

      - name: Set environment variables
        run: |
          echo "DEFAULT_WORKFLOW_NAME=$(echo ${{ inputs.repository }} | awk -F'/' '{print $2}')" >> $GITHUB_ENV
          echo "REPOSITORY=${{ inputs.repository }}" >> $GITHUB_ENV
          echo "APPROVAL_GATE_PATH=/Shared/MDF/${{ inputs.repository }}/${{ inputs.environment }}" >> $GITHUB_ENV
          echo "SCRIPTS_PATH=/Shared/MDF/${{ inputs.repository }}/scripts" >> $GITHUB_ENV
          echo "PACKAGE_NAME=$(echo ${{ inputs.repository }} | awk -F'/' '{print $2}')" >> $GITHUB_ENV
          echo "CURRENT_VERSION=$(poetry version --dry-run -s)" >> $GITHUB_ENV

      - name: Connect to Databricks with Frmwk profiles
        run: |
          echo ${{ secrets.AZURE_DATABRICKS_PAT }} | \
            databricks configure --profile ar-frmwk --host ${{ env.DATABRICKS_HOST }} --token

      - name: Deploy deployment approval gate components to Databricks
        if: ${{ contains(fromJson('["sit", "uat"]'), inputs.environment) }}
        run: |
          # Copy files to Databricks Workspace
          databricks --profile=ar-frmwk workspace mkdirs ${{ env.APPROVAL_GATE_PATH }}
          dbx sync workspace --profile=ar-frmwk --source ./deployment/services/databricks/workspace/${{ inputs.environment }} --dest-dir ${{ env.APPROVAL_GATE_PATH }} --no-watch --full-sync
          databricks --profile=ar-frmwk workspace ls ${{ env.APPROVAL_GATE_PATH }} --absolute -l

      - name: Deploy deployment scripts to Databricks
        run: |
          # Copy files to Databricks Workspace
          databricks --profile=ar-frmwk workspace mkdirs ${{ env.SCRIPTS_PATH }}
          dbx sync workspace --profile=ar-frmwk --source ./deployment/services/databricks/workspace/scripts --dest-dir ${{ env.SCRIPTS_PATH }} --no-watch --full-sync
          databricks --profile=ar-frmwk workspace ls ${{ env.SCRIPTS_PATH }} --absolute -l

      - name: Deploy Databricks workflow to ${{ inputs.environment }} environment
        run: |
          databricks --profile=ar-frmwk jobs list
          dbx deploy --environment default --deployment-file=./deployment/dbx/deployment.yml.j2 --jinja-variables-file=./deployment/dbx/includes/jinja_variables.yml --no-package
          databricks --profile=ar-frmwk jobs list

      - name: Load environment variables from cicd env file
        run: |
          cat ./deployment/service/azure_devops/azure_devops_boards.env >> $GITHUB_ENV

      - name: Set job outputs
        id: op1
        run: |
          echo "work_item_id=$(echo ${{ env.WORK_ITEM_ID }})" >> $GITHUB_OUTPUT

  update-work-item:
    name: Update a work item on Azure Boards
    runs-on: ubuntu-20.04
    needs: [deploy]

    steps:
      - name: Checkout main branch of DevOps repository
        uses: actions/checkout@v4
        with:
          repository: mdf-sandbox/sample-devops
          ref: main
          fetch-depth: 0

      - name: Update a work item on Azure Boards
        uses: ./custom-actions/azure-devops-boards/update-work-item
        with:
          environment: ${{ inputs.environment }}
          work_item_id: ${{ needs.deploy.outputs.work_item_id }}
          board_column: '${{ inputs.environment }} Deployment'
          token: ${{ secrets.AZURE_DEVOPS_PAT }}